qchisq(0.025)
qchisq(0.025,512)
qchisq(c(0.025,0.975),512)
qt(0.025, 20)
qt(0.975, 20)
qt(0.975, 8)
6/2.306
qt(0.975, 18)
qt(0.975, 18)*sqrt(2)/3*0.64
qt(0.95, 18)*sqrt(2)/3*0.64
qexp(0.025)
qn(0.025)
q(0.025)
qnorm(0.025)
qt(0.95, 18)*sqrt(2)/3*0.64
qt(0.975, 18)*sqrt(2)/3*0.64
qt(0.975, 18)
qt(0.975, 18)*sqrt(2)/3*sqrt(0.64)
qt(0.975, 18)*sqrt(2/9)*sqrt(0.64)
q()
source(http://bioconductor.org/biocLite.R)
source('http://bioconductor.org/biocLite.R')
biocLite()
install.packages(KernSmooth)
library(KernSmooth)
install.packages(swirl)
install.packages('swirl')
library(swirl)
swirl()
bye()
q()
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
seq(5,10, length=30)
myseq <- seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,
| 1, 2), times = 10)
rep(c(0,1, 2), times = 10)
rep(c(0,1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "JD")
myname
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"),sep='')
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical(myMatrix,myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <-data.frame(patients, myMatrix)
myData
class(myData)
cnames("patient", "age", "weight", "bp", "rating", "test)
cnames("patient", "age", "weight", "bp", "rating", "test")
cnames("patient", "age", "weight", "bp", "rating", "test")
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData) <- cnames
myData
bye()
q()
add2 <- fuction(x,y){x+y}
add2 <- fuction(x,y) {x+y}
add2 <- function(x,y) {x+y}
add2(1,4)
q()
q()
x <- 1:10
if(x > 5) {
x <- 0
}
x
x <- 1:10
if(x == 1) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
x + f(x)
x + g(x)
f(3)
f <- function(x) {
+     g <- function(y) {
+         y + z
+     }
+     z <- 4
+     x + g(x)
+ }
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
q()
?cpr
?cor
q()
?debug
q()
source('~/R data/caching.R')
makeVector(1:10)
temp <- makeVector(1:10)
cachemean(temp)
cachemean(1:10)
temp2 <- makeVector(1:10)
debug(cachemean)
cachemean(temp2)
cachemean(temp)
n
debug(cachemean)
q()
set.seed(1)
rpois(5,2)
?rpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
set.seed(10)
x <- rbinom(100, 10, 0.5)
e <- rnorm(100, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
?plot
plot(x,y,"h")
set.seed(10)
x <- rbinom(1000, 10, 0.5)
e <- rnorm(1000, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y,"h")
plot(x,y)
?set.seed
q()
?sto
??sto
?stop
q()
source('~/R data/test.R')
source('~/R data/test.R')
source('~/R data/test.R')
source('~/R data/test.R')
matrix <- cbind(c(0,1),c(1,0))
x <- makeCacheMatrix(matrix)
temp <- cacheSolve(x)
choose(3,9)
choose(9,3)
?poisson
?pois
??pois
ppois(10, 5, lower.tail = T)
ppois(10, 15, lower.tail = T)
pbinom(3.5, 5, 0.5, lower.tail = F)
qnorm(0.68)
qnorm(0.95)
pnorm(1)
pnorm(1, lower.tail=F)
pnorm(16, mean = 15, sd = 1, lower.tail = FALSE)
pnorm(16, mean = 15, sd = 1, lower.tail = FALSE) + pnorm(14, mean = 15, sd = 1, lower.tail = TRUE)
0.75*0.3/(0.75*03+0.52*0.7)
0.75*0.3/(0.75*0.3+0.52*0.7)
pnorm(70, mean = 80, sd = 10)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75, lower.tail = FALSE)
qnorm(0.95, mean = 1100, sd = 7.5)
q()
?qt
qt(0.975, 9)
qt(0.025, 9)
qt(0.975, 9)*30/3
qt(0.975, 8)*30/3
2/qt(0.025, 9)*3
6/qt(0.975, 8)
9*0.6+9*0.68
/18
(9*0.6+9*0.68)/18
prob = c(0.025,0.975)
-2+sqrt(0.64*2/9)*qt(prob,18)
-2+sqrt(0.64/5)*qt(prob,18)
-2+sqrt(1.25/50)*qt(prob,98)
1.5^2+1.8^2
5.49/2
sqrt(5.49/2)
dev <- sqrt(5.49/2)
-4+dev*sqrt(2/9)*qt(prob,16)
prob2 = c(0.05,0.95)
-4+dev*sqrt(2/9)*qt(prob2,16)
q()
?aggregate
?qnorm
qnorm(0.95, mean = 9, sd = 4)
qnorm(0.95)
sqrt(12)
qnorm(0.975)
qnorm(0.975)*sqrt(12)/4
qnorm(0.95)*sqrt(12)/4
qnorm(0.95)*10/4
0.66/4*10
x = c(140,138,150,148,135)
y = c(132,135,151,146,130)
t.test(x,y,paired=TRUE)
qnorm(0.975)*30
qnorm(0.975)*10
choose(4,3)*0.5^4 + choose(4,4)*0.5^4
?ppois
ppois(10,17.87)
?pt
1.5^2+1.8^2
/2
(1.5^2+1.8^2)/2
sqrt(2.745)
sqrt(2/9)
sqrt(2.745)*sqrt(2/9)
4/0.781025
pt(5.12, df = 16)
pt(5.12, df = 16, lower.tail=FALSE)
x = rnorm(n=8,mean=-3,sd=1.65)
y = rnorm(n=8,mean=1,sd=1.65)
t.test(x,y)
x = rnorm(n=8,mean=-3,sd=1.65)
y = rnorm(n=8,mean=1,sd=1.65)
t.test(x,y)
t.test(x,y,var.equal=TRUE)
x = rnorm(n=9,mean=-3,sd=1.65)
y = rnorm(n=9,mean=1,sd=1.65)
t.test(x,y,var.equal=TRUE)
p <- t.test(x,y,var.equal=TRUE)
p <- t.test(x,y,var.equal=TRUE)$p.value
summary(pvect)
source('~/.active-rstudio-document')
summary(pvect)
0.01/0.004
2.5-qnorm(0.95)
pt(0.8551464, d=99)
pt(0.8551464, df=99)
qt(0.80, df=99)
qt(0.90, df=99)
qt(0.90, df=99)+qnorm(0.95)
2.935*0.04/0.01
11.74^2
qnorm(0.975)
qt(0.975, df=8)
qt(-0.025, df=8)
qt(0.025, df=8)
q()
?with
par()
?par
?Devices
library(knitr)
install.packages("ggplot2")
install.packages("knitr")
q()
setwd("~/GitHub/RepData_PeerAssessment1")
unzip("activity.zip")
data = read.csv("activity.csv")
data.by.time=split(data, as.factor(data$interval))
average <- sapply(data.by.time, FUN=function(t) mean(t$steps, na.rm=TRUE))
na.tot = sum(is.na(data$steps))
replace <- 1:length(data$steps)
replace <- 1:length(data$steps)[is.na(data$steps)]
is.na(data$steps)
test <- is.na(data$steps)
replace[test]
replace <- (1:length(data$steps))[is.na(data$steps)]
for (int in replace){
data$steps[int] <- average[data$interval[int]]
}
average
for (int in replace){
data$steps[int] <- average[as.character(data$interval[int])]
}
tester <- data$date[1:100]
tester <- as.character(tester)
weekdays(tester)
tester <- as.POSIXct.Date(tester)
tester <- as.POSIXct(tester, format='%Y-%m-%d')
weekdays(tester)
days <- as.POSIXct(as.character(data$date), format='%Y-%m-%d')
days <- weekdays(as.POSIXct(as.character(data$date), format='%Y-%m-%d'))
weekend <- weekdays == "Saturday" | weekdays == "Sunday"
weekend <- days == "Saturday" | days == "Sunday"
sum(weekend)
data <- cbind(data, data$steps)
names(data)[4] <- "replaced steps"
data <- cbind(data, as.factor(weekend))
library(lattice)
xyplot(replace ~ interval | as.factor(weekend), data = data, layout = c(1,2))
names(data)[5] <- "weekend"
data.by.we=split(data, data$weekend)
names(data.by.we) = c("Weekday", "Weekend")
average.weekday <- sapply(split(data.by.we$"Weekday", as.factor(data.by.we$"Weekday"$interval)),
FUN=function(t) mean(t$steps, na.rm=TRUE))
plot(as.integer(names(average.weekday)), average.weekday, type='l', xlab = "Interval", ylab = "Average number of steps", main = "Weekdays")
average.weekend <- sapply(split(data.by.we$"Weekend", as.factor(data.by.we$"Weekend"$interval)),
FUN=function(t) mean(t$steps, na.rm=TRUE))
plot(as.integer(names(average.weekend)), average.weekend, type='l', xlab = "Interval", ylab = "Average number of steps", main ="Weekends")
xyplot(average.weekday ~ as.integer(names(average.weekday)), type='l', xlab = "Interval", ylab = "Average number of steps", main = "Weekdays")
P1 <- xyplot(average.weekday ~ as.integer(names(average.weekday)), type='l', xlab = "Interval", ylab = "Average number of steps", main = "Weekdays")
P2 <- xyplot(average.weekend ~ as.integer(names(average.weekend)), type='l', xlab = "Interval", ylab = "Average number of steps", main = "Weekends")
print(P1, more=TRUE)
print(P2)
averages <- data.frame()
avaerages <- cbind(names(average.weekday), average.weekday, "Weekday")
View(avaerages)
averages <- cbind(names(average.weekday), average.weekday, "Weekday")
averages <- rbind(cbind(names(average.weekday), average.weekday, "Weekday"), cbind(names(average.weekend), average.weekend), "Weekend")
averages <- rbind(cbind(names(average.weekday), average.weekday, "Weekday"), cbind(names(average.weekend), average.weekend), "Weekend"))
averages <- rbind(cbind(names(average.weekday), average.weekday, "Weekday"), cbind(names(average.weekend), average.weekend, "Weekend"))
View(averages)
averages <- rbind(cbind(average.weekday, "Weekday"), cbind(average.weekend, "Weekend"))
View(averages)
xyplot(average.weekday ~ as.integer(row.names) | as.factor(V2), data=averages, type='l')
xyplot(average.weekday ~ as.integer(row.names), data=averages, type='l')
xyplot(as.integer(average.weekday) ~ as.integer(row.names), data=averages, type='l')
as.integer(average.weekday)
xyplot(as.numeric(average.weekday) ~ as.numeric(row.names), data=averages, type='l')
xyplot(as.numeric(average.weekday) ~ as.numeric(row.names), data=averages)
xyplot(as.numeric(averages$average.weekday) ~ as.numeric(averages$row.names))
names(averages)
averages <- rbind(cbind(names(average.weekday), average.weekday, "Weekday"),
cbind(names(average.weekend), average.weekend, "Weekend"))
averages <- as.data.frame(averages, row.names=NULL, names=c("Interval", "Average", "Day"))
View(averages)
names(averages)
names(averages) <- c("Interval", "Average", "Day")
View(averages)
row.names(averages)
row.names(averages) <- NULL
View(averages)
xyplot(as.numeric(averages$Average) ~ as.numeric(averages$Interval))
xyplot(as.numeric(Average) ~ as.numeric(Interval), data = averages)
xyplot(as.numeric(Average) ~ as.numeric(Interval) | Day, data = averages, type=l, layout=c(1,2))
xyplot(as.numeric(Average) ~ as.numeric(Interval) | Day, data = averages, type='l', layout=c(1,2))
View(data)
xyplot(as.numeric(Average) ~ as.numeric(Interval) | Day, data = averages, type='l', layout=c(1,2))
xyplot(as.numeric(Average) ~ as.integer(Interval) | Day, data = averages, type='l', layout=c(1,2))
as.integer(averages$Interval)
as.integer(as.character(averages$Interval))
averages$Interval <- as.integer(as.character(averages$Interval))
averages$Average <- as.numeric(as.character(averages$Average))
xyplot(Average ~ Interval | Day, data = averages, type='l', layout=c(1,2))
xyplot(Average ~ Interval | Day, data = averages, type='l', layout=c(1,2), ylab='Number of steps')
q()
